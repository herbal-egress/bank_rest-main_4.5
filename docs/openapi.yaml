openapi: 3.0.3
info:
  title: Bank REST API
  description: REST API для управления банковскими картами, транзакциями и пользователями
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер
  - url: https://api.bank-rest.com
    description: Продакшн сервер
paths:
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      description: Создает нового пользователя с указанными данными и ролью (по умолчанию USER).
      operationId: registerUser
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Неверные данные запроса или пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/login:
    post:
      summary: Аутентификация пользователя
      description: Выполняет вход пользователя и возвращает JWT-токен.
      operationId: loginUser
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Успешная аутентификация, возвращен JWT-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/admin/users:
    get:
      summary: Получение списка всех пользователей
      description: Возвращает список всех зарегистрированных пользователей. Доступно только администраторам.
      operationId: getAllUsers
      tags:
        - Администрирование
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список пользователей успешно возвращен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/admin/cards:
    get:
      summary: Получение списка всех карт
      description: Возвращает список всех банковских карт. Доступно только администраторам.
      operationId: getAllCards
      tags:
        - Администрирование
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список карт успешно возвращен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cards:
    post:
      summary: Создание новой карты
      description: Создает новую банковскую карту для текущего пользователя.
      operationId: createCard
      tags:
        - Карты
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cards/{cardId}:
    get:
      summary: Получение информации о карте
      description: Возвращает информацию о карте по её ID. Доступно только владельцу карты или администратору.
      operationId: getCardById
      tags:
        - Карты
      security:
        - BearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о карте успешно возвращена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cards/{cardId}/transactions:
    post:
      summary: Создание транзакции
      description: Выполняет транзакцию с указанной карты. Доступно только владельцу карты.
      operationId: createTransaction
      tags:
        - Транзакции
      security:
        - BearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '201':
          description: Транзакция успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Неверные данные запроса или недостаточно средств
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          example: "user1"
        password:
          type: string
          example: "password123"
      required:
        - username
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - token
    UserRequest:
      type: object
      properties:
        username:
          type: string
          example: "user1"
        password:
          type: string
          example: "password123"
      required:
        - username
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "user1"
      required:
        - id
        - username
    CardRequest:
      type: object
      properties:
        cardNumber:
          type: string
          example: "1234567890123456"
        cardHolder:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          example: "2025-12"
        cvv:
          type: string
          example: "123"
      required:
        - cardNumber
        - cardHolder
        - expiryDate
        - cvv
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        cardNumber:
          type: string
          example: "**** **** **** 3456" # исправлено: значение заключено в кавычки
        cardHolder:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          example: "2025-12"
        balance:
          type: number
          format: double
          example: 1000.00
      required:
        - id
        - cardNumber
        - cardHolder
        - expiryDate
        - balance
    TransactionRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          example: 100.00
        recipientCardNumber:
          type: string
          example: "9876543210987654"
      required:
        - amount
        - recipientCardNumber
    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        amount:
          type: number
          format: double
          example: 100.00
        timestamp:
          type: string
          format: date-time
          example: "2025-09-27T12:00:00Z"
      required:
        - id
        - amount
        - timestamp
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error description"
        status:
          type: integer
          example: 400
      required:
        - message
        - status
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT