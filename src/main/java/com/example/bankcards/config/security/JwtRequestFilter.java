// config/security/JwtRequestFilter.java
package com.example.bankcards.config.security;

import com.example.bankcards.service.auth.UserDetailsService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ –≤ –∫–∞–∂–¥–æ–º HTTP –∑–∞–ø—Ä–æ—Å–µ.
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class JwtRequestFilter extends OncePerRequestFilter {

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    private final UserDetailsService userDetailsService;

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT.
    private final JwtUtil jwtUtil;

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–∏–Ω —Ä–∞–∑.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain chain) throws ServletException, IOException {

        final String authorizationHeader = request.getHeader("Authorization");
        String path = request.getRequestURI();

        // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Swagger.
        log.debug("=== JWT –§–ò–õ–¨–¢–† ===");
        log.debug("–ú–µ—Ç–æ–¥: {}, –ü—É—Ç—å: {}, Authorization: {}",
                request.getMethod(), path,
                authorizationHeader != null ? "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

        // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ Swagger.
        if (path.startsWith("/swagger-ui") || path.startsWith("/v3/api-docs")) {
            log.debug("–ó–ê–ü–†–û–° –ö SWAGGER: {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º JWT —Ñ–∏–ª—å—Ç—Ä", path);
        }

        String username = null;
        String jwtToken = null;

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            jwtToken = authorizationHeader.substring(7);
            username = jwtUtil.extractUsername(jwtToken);
            log.debug("–ò–∑–≤–ª–µ—á–µ–Ω username –∏–∑ —Ç–æ–∫–µ–Ω–∞: {}", username);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            try {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                if (jwtUtil.validateToken(jwtToken, userDetails)) {
                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                } else {
                    log.warn("–¢–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
                }
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", username, e.getMessage(), e);
            }
        }

        log.debug("=== –ö–û–ù–ï–¶ JWT –§–ò–õ–¨–¢–†–ê - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ ===");
        chain.doFilter(request, response);
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String path = request.getRequestURI();

        // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ü–ò–°–û–ö –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô - /auth/login –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú!
        String[] publicPaths = {
                "/auth/login",           // ‚úÖ –õ–û–ì–ò–ù - –°–ê–ú–´–ô –ü–ï–†–í–´–ô!
                "/auth/**",              // ‚úÖ –í—Å–µ auth –ø—É—Ç–∏
                "/swagger-ui.html",      // ‚úÖ Swagger
                "/swagger-ui/**",        // ‚úÖ Swagger —Ä–µ—Å—É—Ä—Å—ã
                "/v3/api-docs/**",       // ‚úÖ OpenAPI
                "/v3/api-docs",          // ‚úÖ OpenAPI –≥–ª–∞–≤–Ω—ã–π
                "/v3/api-docs.yaml",     // ‚úÖ OpenAPI YAML
                "/actuator/health",      // ‚úÖ Health
                "/actuator/**"           // ‚úÖ Actuator
        };

        for (String publicPath : publicPaths) {
            if (path.equals(publicPath) || (publicPath.endsWith("**") && path.startsWith(publicPath.replace("/**", "")))) {
                log.debug("üö´ JWT –§–ò–õ–¨–¢–† –ü–†–û–ü–£–©–ï–ù: {} (–º–∞—Ç—á–∏—Ç {})", path, publicPath);
                return true;
            }
        }

        log.debug("üîí JWT –§–ò–õ–¨–¢–† –ü–†–ò–ú–ï–ù–Å–ù: {}", path);
        return false;
    }
}